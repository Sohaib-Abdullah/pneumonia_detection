# -*- coding: utf-8 -*-
"""Chest_Detection_Pneumonia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nRHrEDCJgdjpvUTJUINHRoHVa4jHmIk0
"""

!pip install -q kaggle

from google.colab import files

files.upload()

! mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets list

! kaggle datasets download paultimothymooney/chest-xray-pneumonia

! mkdir data

!unzip /content/chest-xray-pneumonia.zip -d data



# Commented out IPython magic to ensure Python compatibility.
import cv2
import matplotlib.pyplot as plt
# %matplotlib inline

normal_chest = cv2.imread('/content/data/chest_xray/train/NORMAL/IM-0119-0001.jpeg')

normal_chest.shape

normal_chest = cv2.cvtColor(normal_chest, cv2.COLOR_BGR2RGB)
plt.imshow(normal_chest)

pneumonia_chest = cv2.imread('/content/data/chest_xray/train/PNEUMONIA/person1002_bacteria_2933.jpeg')
pneumonia_chest.shape

pneumonia_chest = cv2.cvtColor(pneumonia_chest, cv2.COLOR_BGR2RGB)
plt.imshow(pneumonia_chest)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

image_gen = ImageDataGenerator(rotation_range=30,
                               width_shift_range=0.1,
                               height_shift_range=0.1,
                               rescale = 1/255,
                               shear_range=0.2,
                               zoom_range=0.2,
                               horizontal_flip = True,
                               fill_mode='nearest')

image_gen.random_transform(pneumonia_chest)
print('done')

plt.imshow(pneumonia_chest)

plt.imshow(image_gen.random_transform(pneumonia_chest))
print('done')

image_gen.flow_from_directory('/content/data/chest_xray/train')

image_gen.flow_from_directory('/content/data/chest_xray/val')

image_gen.flow_from_directory('/content/data/chest_xray/test')

input_shape=(250,250,3)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Activation, Dropout

model = Sequential()
#block 1
model.add(Conv2D(filters=32, kernel_size=(3,3), input_shape=input_shape, activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

#block 2
model.add(Conv2D(filters=64, kernel_size=(3,3), input_shape=input_shape, activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

#block 2
model.add(Conv2D(filters=64, kernel_size=(3,3), input_shape=input_shape, activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.summary()

input_shape[:2]

batch_size =32
train_gen = image_gen.flow_from_directory('/content/data/chest_xray/train',
                                          target_size=input_shape[:2],
                                          batch_size=batch_size,
                                          class_mode='binary')

val_gen = image_gen.flow_from_directory('/content/data/chest_xray/val',
                                          target_size=input_shape[:2],
                                          batch_size=batch_size,
                                          class_mode='binary')

test_gen = image_gen.flow_from_directory('/content/data/chest_xray/test',
                                          target_size=input_shape[:2],
                                          batch_size=batch_size,
                                          class_mode='binary')

train_gen.class_indices

results = model.fit_generator(train_gen, epochs=5, steps_per_epoch=100, validation_data=val_gen,
                              validation_steps=12)

type(results)

print(results.history['accuracy'])

print(result.history.keys())

plt.plot(results.history['accuracy'])
plt.plot(results.history['val_accuracy'])
plt.title('Model Performance')
plt.ylabel('accuracy')
plt.xlabel('Epochs')
plt.legend(['accuracy', 'val_accuracy'], loc='upper left')
plt.show()

from tensorflow.keras.preprocessing import image
import numpy as np

pneumonia_img  = image.load_img('/content/data/chest_xray/train/PNEUMONIA/person1003_bacteria_2934.jpeg', target_size=(250,250))
pneumonia_img = image.img_to_array(pneumonia_img)
print(pneumonia_img.shape)
pneumonia_img = np.expand_dims(pneumonia_img, axis=0)
pneumonia_img = pneumonia_img/255
print(pneumonia_img.shape)

prediction = model.predict(pneumonia_img)
print(f'Probabliltiy of that image to be a pneumonia ia:{prediction}')

result = model.predict_classes(pneumonia_img)
print(result)

